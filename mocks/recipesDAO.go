// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/pbdeuchler/assistant-server/dao/postgres"
	mock "github.com/stretchr/testify/mock"
)

// NewMockrecipesDAO creates a new instance of MockrecipesDAO. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockrecipesDAO(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockrecipesDAO {
	mock := &MockrecipesDAO{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockrecipesDAO is an autogenerated mock type for the recipesDAO type
type MockrecipesDAO struct {
	mock.Mock
}

type MockrecipesDAO_Expecter struct {
	mock *mock.Mock
}

func (_m *MockrecipesDAO) EXPECT() *MockrecipesDAO_Expecter {
	return &MockrecipesDAO_Expecter{mock: &_m.Mock}
}

// CreateRecipes provides a mock function for the type MockrecipesDAO
func (_mock *MockrecipesDAO) CreateRecipes(ctx context.Context, r postgres.Recipes) (postgres.Recipes, error) {
	ret := _mock.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for CreateRecipes")
	}

	var r0 postgres.Recipes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, postgres.Recipes) (postgres.Recipes, error)); ok {
		return returnFunc(ctx, r)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, postgres.Recipes) postgres.Recipes); ok {
		r0 = returnFunc(ctx, r)
	} else {
		r0 = ret.Get(0).(postgres.Recipes)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, postgres.Recipes) error); ok {
		r1 = returnFunc(ctx, r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockrecipesDAO_CreateRecipes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRecipes'
type MockrecipesDAO_CreateRecipes_Call struct {
	*mock.Call
}

// CreateRecipes is a helper method to define mock.On call
//   - ctx context.Context
//   - r postgres.Recipes
func (_e *MockrecipesDAO_Expecter) CreateRecipes(ctx interface{}, r interface{}) *MockrecipesDAO_CreateRecipes_Call {
	return &MockrecipesDAO_CreateRecipes_Call{Call: _e.mock.On("CreateRecipes", ctx, r)}
}

func (_c *MockrecipesDAO_CreateRecipes_Call) Run(run func(ctx context.Context, r postgres.Recipes)) *MockrecipesDAO_CreateRecipes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 postgres.Recipes
		if args[1] != nil {
			arg1 = args[1].(postgres.Recipes)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockrecipesDAO_CreateRecipes_Call) Return(recipes postgres.Recipes, err error) *MockrecipesDAO_CreateRecipes_Call {
	_c.Call.Return(recipes, err)
	return _c
}

func (_c *MockrecipesDAO_CreateRecipes_Call) RunAndReturn(run func(ctx context.Context, r postgres.Recipes) (postgres.Recipes, error)) *MockrecipesDAO_CreateRecipes_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRecipes provides a mock function for the type MockrecipesDAO
func (_mock *MockrecipesDAO) DeleteRecipes(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRecipes")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockrecipesDAO_DeleteRecipes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRecipes'
type MockrecipesDAO_DeleteRecipes_Call struct {
	*mock.Call
}

// DeleteRecipes is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockrecipesDAO_Expecter) DeleteRecipes(ctx interface{}, id interface{}) *MockrecipesDAO_DeleteRecipes_Call {
	return &MockrecipesDAO_DeleteRecipes_Call{Call: _e.mock.On("DeleteRecipes", ctx, id)}
}

func (_c *MockrecipesDAO_DeleteRecipes_Call) Run(run func(ctx context.Context, id string)) *MockrecipesDAO_DeleteRecipes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockrecipesDAO_DeleteRecipes_Call) Return(err error) *MockrecipesDAO_DeleteRecipes_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockrecipesDAO_DeleteRecipes_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockrecipesDAO_DeleteRecipes_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecipes provides a mock function for the type MockrecipesDAO
func (_mock *MockrecipesDAO) GetRecipes(ctx context.Context, id string) (postgres.Recipes, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRecipes")
	}

	var r0 postgres.Recipes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (postgres.Recipes, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) postgres.Recipes); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(postgres.Recipes)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockrecipesDAO_GetRecipes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecipes'
type MockrecipesDAO_GetRecipes_Call struct {
	*mock.Call
}

// GetRecipes is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockrecipesDAO_Expecter) GetRecipes(ctx interface{}, id interface{}) *MockrecipesDAO_GetRecipes_Call {
	return &MockrecipesDAO_GetRecipes_Call{Call: _e.mock.On("GetRecipes", ctx, id)}
}

func (_c *MockrecipesDAO_GetRecipes_Call) Run(run func(ctx context.Context, id string)) *MockrecipesDAO_GetRecipes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockrecipesDAO_GetRecipes_Call) Return(recipes postgres.Recipes, err error) *MockrecipesDAO_GetRecipes_Call {
	_c.Call.Return(recipes, err)
	return _c
}

func (_c *MockrecipesDAO_GetRecipes_Call) RunAndReturn(run func(ctx context.Context, id string) (postgres.Recipes, error)) *MockrecipesDAO_GetRecipes_Call {
	_c.Call.Return(run)
	return _c
}

// ListRecipes provides a mock function for the type MockrecipesDAO
func (_mock *MockrecipesDAO) ListRecipes(ctx context.Context, options postgres.ListOptions) ([]postgres.Recipes, error) {
	ret := _mock.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for ListRecipes")
	}

	var r0 []postgres.Recipes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, postgres.ListOptions) ([]postgres.Recipes, error)); ok {
		return returnFunc(ctx, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, postgres.ListOptions) []postgres.Recipes); ok {
		r0 = returnFunc(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postgres.Recipes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, postgres.ListOptions) error); ok {
		r1 = returnFunc(ctx, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockrecipesDAO_ListRecipes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRecipes'
type MockrecipesDAO_ListRecipes_Call struct {
	*mock.Call
}

// ListRecipes is a helper method to define mock.On call
//   - ctx context.Context
//   - options postgres.ListOptions
func (_e *MockrecipesDAO_Expecter) ListRecipes(ctx interface{}, options interface{}) *MockrecipesDAO_ListRecipes_Call {
	return &MockrecipesDAO_ListRecipes_Call{Call: _e.mock.On("ListRecipes", ctx, options)}
}

func (_c *MockrecipesDAO_ListRecipes_Call) Run(run func(ctx context.Context, options postgres.ListOptions)) *MockrecipesDAO_ListRecipes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 postgres.ListOptions
		if args[1] != nil {
			arg1 = args[1].(postgres.ListOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockrecipesDAO_ListRecipes_Call) Return(recipess []postgres.Recipes, err error) *MockrecipesDAO_ListRecipes_Call {
	_c.Call.Return(recipess, err)
	return _c
}

func (_c *MockrecipesDAO_ListRecipes_Call) RunAndReturn(run func(ctx context.Context, options postgres.ListOptions) ([]postgres.Recipes, error)) *MockrecipesDAO_ListRecipes_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRecipes provides a mock function for the type MockrecipesDAO
func (_mock *MockrecipesDAO) UpdateRecipes(ctx context.Context, id string, r postgres.Recipes) (postgres.Recipes, error) {
	ret := _mock.Called(ctx, id, r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRecipes")
	}

	var r0 postgres.Recipes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, postgres.Recipes) (postgres.Recipes, error)); ok {
		return returnFunc(ctx, id, r)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, postgres.Recipes) postgres.Recipes); ok {
		r0 = returnFunc(ctx, id, r)
	} else {
		r0 = ret.Get(0).(postgres.Recipes)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, postgres.Recipes) error); ok {
		r1 = returnFunc(ctx, id, r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockrecipesDAO_UpdateRecipes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRecipes'
type MockrecipesDAO_UpdateRecipes_Call struct {
	*mock.Call
}

// UpdateRecipes is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - r postgres.Recipes
func (_e *MockrecipesDAO_Expecter) UpdateRecipes(ctx interface{}, id interface{}, r interface{}) *MockrecipesDAO_UpdateRecipes_Call {
	return &MockrecipesDAO_UpdateRecipes_Call{Call: _e.mock.On("UpdateRecipes", ctx, id, r)}
}

func (_c *MockrecipesDAO_UpdateRecipes_Call) Run(run func(ctx context.Context, id string, r postgres.Recipes)) *MockrecipesDAO_UpdateRecipes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 postgres.Recipes
		if args[2] != nil {
			arg2 = args[2].(postgres.Recipes)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockrecipesDAO_UpdateRecipes_Call) Return(recipes postgres.Recipes, err error) *MockrecipesDAO_UpdateRecipes_Call {
	_c.Call.Return(recipes, err)
	return _c
}

func (_c *MockrecipesDAO_UpdateRecipes_Call) RunAndReturn(run func(ctx context.Context, id string, r postgres.Recipes) (postgres.Recipes, error)) *MockrecipesDAO_UpdateRecipes_Call {
	_c.Call.Return(run)
	return _c
}
