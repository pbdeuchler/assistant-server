// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/pbdeuchler/assistant-server/dao/postgres"
	mock "github.com/stretchr/testify/mock"
)

// NewMocknotesDAO creates a new instance of MocknotesDAO. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocknotesDAO(t interface {
	mock.TestingT
	Cleanup(func())
}) *MocknotesDAO {
	mock := &MocknotesDAO{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MocknotesDAO is an autogenerated mock type for the notesDAO type
type MocknotesDAO struct {
	mock.Mock
}

type MocknotesDAO_Expecter struct {
	mock *mock.Mock
}

func (_m *MocknotesDAO) EXPECT() *MocknotesDAO_Expecter {
	return &MocknotesDAO_Expecter{mock: &_m.Mock}
}

// CreateNotes provides a mock function for the type MocknotesDAO
func (_mock *MocknotesDAO) CreateNotes(ctx context.Context, n postgres.Notes) (postgres.Notes, error) {
	ret := _mock.Called(ctx, n)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotes")
	}

	var r0 postgres.Notes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, postgres.Notes) (postgres.Notes, error)); ok {
		return returnFunc(ctx, n)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, postgres.Notes) postgres.Notes); ok {
		r0 = returnFunc(ctx, n)
	} else {
		r0 = ret.Get(0).(postgres.Notes)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, postgres.Notes) error); ok {
		r1 = returnFunc(ctx, n)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MocknotesDAO_CreateNotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotes'
type MocknotesDAO_CreateNotes_Call struct {
	*mock.Call
}

// CreateNotes is a helper method to define mock.On call
//   - ctx context.Context
//   - n postgres.Notes
func (_e *MocknotesDAO_Expecter) CreateNotes(ctx interface{}, n interface{}) *MocknotesDAO_CreateNotes_Call {
	return &MocknotesDAO_CreateNotes_Call{Call: _e.mock.On("CreateNotes", ctx, n)}
}

func (_c *MocknotesDAO_CreateNotes_Call) Run(run func(ctx context.Context, n postgres.Notes)) *MocknotesDAO_CreateNotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 postgres.Notes
		if args[1] != nil {
			arg1 = args[1].(postgres.Notes)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MocknotesDAO_CreateNotes_Call) Return(notes postgres.Notes, err error) *MocknotesDAO_CreateNotes_Call {
	_c.Call.Return(notes, err)
	return _c
}

func (_c *MocknotesDAO_CreateNotes_Call) RunAndReturn(run func(ctx context.Context, n postgres.Notes) (postgres.Notes, error)) *MocknotesDAO_CreateNotes_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNotes provides a mock function for the type MocknotesDAO
func (_mock *MocknotesDAO) DeleteNotes(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotes")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MocknotesDAO_DeleteNotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotes'
type MocknotesDAO_DeleteNotes_Call struct {
	*mock.Call
}

// DeleteNotes is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MocknotesDAO_Expecter) DeleteNotes(ctx interface{}, id interface{}) *MocknotesDAO_DeleteNotes_Call {
	return &MocknotesDAO_DeleteNotes_Call{Call: _e.mock.On("DeleteNotes", ctx, id)}
}

func (_c *MocknotesDAO_DeleteNotes_Call) Run(run func(ctx context.Context, id string)) *MocknotesDAO_DeleteNotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MocknotesDAO_DeleteNotes_Call) Return(err error) *MocknotesDAO_DeleteNotes_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MocknotesDAO_DeleteNotes_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MocknotesDAO_DeleteNotes_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotes provides a mock function for the type MocknotesDAO
func (_mock *MocknotesDAO) GetNotes(ctx context.Context, id string) (postgres.Notes, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetNotes")
	}

	var r0 postgres.Notes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (postgres.Notes, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) postgres.Notes); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(postgres.Notes)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MocknotesDAO_GetNotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotes'
type MocknotesDAO_GetNotes_Call struct {
	*mock.Call
}

// GetNotes is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MocknotesDAO_Expecter) GetNotes(ctx interface{}, id interface{}) *MocknotesDAO_GetNotes_Call {
	return &MocknotesDAO_GetNotes_Call{Call: _e.mock.On("GetNotes", ctx, id)}
}

func (_c *MocknotesDAO_GetNotes_Call) Run(run func(ctx context.Context, id string)) *MocknotesDAO_GetNotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MocknotesDAO_GetNotes_Call) Return(notes postgres.Notes, err error) *MocknotesDAO_GetNotes_Call {
	_c.Call.Return(notes, err)
	return _c
}

func (_c *MocknotesDAO_GetNotes_Call) RunAndReturn(run func(ctx context.Context, id string) (postgres.Notes, error)) *MocknotesDAO_GetNotes_Call {
	_c.Call.Return(run)
	return _c
}

// ListNotes provides a mock function for the type MocknotesDAO
func (_mock *MocknotesDAO) ListNotes(ctx context.Context, options postgres.ListOptions) ([]postgres.Notes, error) {
	ret := _mock.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for ListNotes")
	}

	var r0 []postgres.Notes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, postgres.ListOptions) ([]postgres.Notes, error)); ok {
		return returnFunc(ctx, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, postgres.ListOptions) []postgres.Notes); ok {
		r0 = returnFunc(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postgres.Notes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, postgres.ListOptions) error); ok {
		r1 = returnFunc(ctx, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MocknotesDAO_ListNotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNotes'
type MocknotesDAO_ListNotes_Call struct {
	*mock.Call
}

// ListNotes is a helper method to define mock.On call
//   - ctx context.Context
//   - options postgres.ListOptions
func (_e *MocknotesDAO_Expecter) ListNotes(ctx interface{}, options interface{}) *MocknotesDAO_ListNotes_Call {
	return &MocknotesDAO_ListNotes_Call{Call: _e.mock.On("ListNotes", ctx, options)}
}

func (_c *MocknotesDAO_ListNotes_Call) Run(run func(ctx context.Context, options postgres.ListOptions)) *MocknotesDAO_ListNotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 postgres.ListOptions
		if args[1] != nil {
			arg1 = args[1].(postgres.ListOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MocknotesDAO_ListNotes_Call) Return(notess []postgres.Notes, err error) *MocknotesDAO_ListNotes_Call {
	_c.Call.Return(notess, err)
	return _c
}

func (_c *MocknotesDAO_ListNotes_Call) RunAndReturn(run func(ctx context.Context, options postgres.ListOptions) ([]postgres.Notes, error)) *MocknotesDAO_ListNotes_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNotes provides a mock function for the type MocknotesDAO
func (_mock *MocknotesDAO) UpdateNotes(ctx context.Context, id string, n postgres.Notes) (postgres.Notes, error) {
	ret := _mock.Called(ctx, id, n)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotes")
	}

	var r0 postgres.Notes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, postgres.Notes) (postgres.Notes, error)); ok {
		return returnFunc(ctx, id, n)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, postgres.Notes) postgres.Notes); ok {
		r0 = returnFunc(ctx, id, n)
	} else {
		r0 = ret.Get(0).(postgres.Notes)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, postgres.Notes) error); ok {
		r1 = returnFunc(ctx, id, n)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MocknotesDAO_UpdateNotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNotes'
type MocknotesDAO_UpdateNotes_Call struct {
	*mock.Call
}

// UpdateNotes is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - n postgres.Notes
func (_e *MocknotesDAO_Expecter) UpdateNotes(ctx interface{}, id interface{}, n interface{}) *MocknotesDAO_UpdateNotes_Call {
	return &MocknotesDAO_UpdateNotes_Call{Call: _e.mock.On("UpdateNotes", ctx, id, n)}
}

func (_c *MocknotesDAO_UpdateNotes_Call) Run(run func(ctx context.Context, id string, n postgres.Notes)) *MocknotesDAO_UpdateNotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 postgres.Notes
		if args[2] != nil {
			arg2 = args[2].(postgres.Notes)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MocknotesDAO_UpdateNotes_Call) Return(notes postgres.Notes, err error) *MocknotesDAO_UpdateNotes_Call {
	_c.Call.Return(notes, err)
	return _c
}

func (_c *MocknotesDAO_UpdateNotes_Call) RunAndReturn(run func(ctx context.Context, id string, n postgres.Notes) (postgres.Notes, error)) *MocknotesDAO_UpdateNotes_Call {
	_c.Call.Return(run)
	return _c
}
