// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/pbdeuchler/assistant-server/dao/postgres"
	mock "github.com/stretchr/testify/mock"
)

// NewMockbootstrapDAO creates a new instance of MockbootstrapDAO. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockbootstrapDAO(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockbootstrapDAO {
	mock := &MockbootstrapDAO{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockbootstrapDAO is an autogenerated mock type for the bootstrapDAO type
type MockbootstrapDAO struct {
	mock.Mock
}

type MockbootstrapDAO_Expecter struct {
	mock *mock.Mock
}

func (_m *MockbootstrapDAO) EXPECT() *MockbootstrapDAO_Expecter {
	return &MockbootstrapDAO_Expecter{mock: &_m.Mock}
}

// GetCredentialsByUserID provides a mock function for the type MockbootstrapDAO
func (_mock *MockbootstrapDAO) GetCredentialsByUserID(ctx context.Context, userID string) ([]postgres.Credentials, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCredentialsByUserID")
	}

	var r0 []postgres.Credentials
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]postgres.Credentials, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []postgres.Credentials); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postgres.Credentials)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockbootstrapDAO_GetCredentialsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCredentialsByUserID'
type MockbootstrapDAO_GetCredentialsByUserID_Call struct {
	*mock.Call
}

// GetCredentialsByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockbootstrapDAO_Expecter) GetCredentialsByUserID(ctx interface{}, userID interface{}) *MockbootstrapDAO_GetCredentialsByUserID_Call {
	return &MockbootstrapDAO_GetCredentialsByUserID_Call{Call: _e.mock.On("GetCredentialsByUserID", ctx, userID)}
}

func (_c *MockbootstrapDAO_GetCredentialsByUserID_Call) Run(run func(ctx context.Context, userID string)) *MockbootstrapDAO_GetCredentialsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockbootstrapDAO_GetCredentialsByUserID_Call) Return(credentialss []postgres.Credentials, err error) *MockbootstrapDAO_GetCredentialsByUserID_Call {
	_c.Call.Return(credentialss, err)
	return _c
}

func (_c *MockbootstrapDAO_GetCredentialsByUserID_Call) RunAndReturn(run func(ctx context.Context, userID string) ([]postgres.Credentials, error)) *MockbootstrapDAO_GetCredentialsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotesByUserID provides a mock function for the type MockbootstrapDAO
func (_mock *MockbootstrapDAO) GetNotesByUserID(ctx context.Context, userID string) ([]postgres.Notes, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetNotesByUserID")
	}

	var r0 []postgres.Notes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]postgres.Notes, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []postgres.Notes); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postgres.Notes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockbootstrapDAO_GetNotesByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotesByUserID'
type MockbootstrapDAO_GetNotesByUserID_Call struct {
	*mock.Call
}

// GetNotesByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockbootstrapDAO_Expecter) GetNotesByUserID(ctx interface{}, userID interface{}) *MockbootstrapDAO_GetNotesByUserID_Call {
	return &MockbootstrapDAO_GetNotesByUserID_Call{Call: _e.mock.On("GetNotesByUserID", ctx, userID)}
}

func (_c *MockbootstrapDAO_GetNotesByUserID_Call) Run(run func(ctx context.Context, userID string)) *MockbootstrapDAO_GetNotesByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockbootstrapDAO_GetNotesByUserID_Call) Return(notess []postgres.Notes, err error) *MockbootstrapDAO_GetNotesByUserID_Call {
	_c.Call.Return(notess, err)
	return _c
}

func (_c *MockbootstrapDAO_GetNotesByUserID_Call) RunAndReturn(run func(ctx context.Context, userID string) ([]postgres.Notes, error)) *MockbootstrapDAO_GetNotesByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPreferencesByUserID provides a mock function for the type MockbootstrapDAO
func (_mock *MockbootstrapDAO) GetPreferencesByUserID(ctx context.Context, userID string) ([]postgres.Preferences, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetPreferencesByUserID")
	}

	var r0 []postgres.Preferences
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]postgres.Preferences, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []postgres.Preferences); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postgres.Preferences)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockbootstrapDAO_GetPreferencesByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPreferencesByUserID'
type MockbootstrapDAO_GetPreferencesByUserID_Call struct {
	*mock.Call
}

// GetPreferencesByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockbootstrapDAO_Expecter) GetPreferencesByUserID(ctx interface{}, userID interface{}) *MockbootstrapDAO_GetPreferencesByUserID_Call {
	return &MockbootstrapDAO_GetPreferencesByUserID_Call{Call: _e.mock.On("GetPreferencesByUserID", ctx, userID)}
}

func (_c *MockbootstrapDAO_GetPreferencesByUserID_Call) Run(run func(ctx context.Context, userID string)) *MockbootstrapDAO_GetPreferencesByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockbootstrapDAO_GetPreferencesByUserID_Call) Return(preferencess []postgres.Preferences, err error) *MockbootstrapDAO_GetPreferencesByUserID_Call {
	_c.Call.Return(preferencess, err)
	return _c
}

func (_c *MockbootstrapDAO_GetPreferencesByUserID_Call) RunAndReturn(run func(ctx context.Context, userID string) ([]postgres.Preferences, error)) *MockbootstrapDAO_GetPreferencesByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTodosByUserID provides a mock function for the type MockbootstrapDAO
func (_mock *MockbootstrapDAO) GetTodosByUserID(ctx context.Context, userID string) ([]postgres.Todo, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetTodosByUserID")
	}

	var r0 []postgres.Todo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]postgres.Todo, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []postgres.Todo); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postgres.Todo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockbootstrapDAO_GetTodosByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTodosByUserID'
type MockbootstrapDAO_GetTodosByUserID_Call struct {
	*mock.Call
}

// GetTodosByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockbootstrapDAO_Expecter) GetTodosByUserID(ctx interface{}, userID interface{}) *MockbootstrapDAO_GetTodosByUserID_Call {
	return &MockbootstrapDAO_GetTodosByUserID_Call{Call: _e.mock.On("GetTodosByUserID", ctx, userID)}
}

func (_c *MockbootstrapDAO_GetTodosByUserID_Call) Run(run func(ctx context.Context, userID string)) *MockbootstrapDAO_GetTodosByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockbootstrapDAO_GetTodosByUserID_Call) Return(todos []postgres.Todo, err error) *MockbootstrapDAO_GetTodosByUserID_Call {
	_c.Call.Return(todos, err)
	return _c
}

func (_c *MockbootstrapDAO_GetTodosByUserID_Call) RunAndReturn(run func(ctx context.Context, userID string) ([]postgres.Todo, error)) *MockbootstrapDAO_GetTodosByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserBySlackUserID provides a mock function for the type MockbootstrapDAO
func (_mock *MockbootstrapDAO) GetUserBySlackUserID(ctx context.Context, slackUserID string) (postgres.Users, error) {
	ret := _mock.Called(ctx, slackUserID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserBySlackUserID")
	}

	var r0 postgres.Users
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (postgres.Users, error)); ok {
		return returnFunc(ctx, slackUserID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) postgres.Users); ok {
		r0 = returnFunc(ctx, slackUserID)
	} else {
		r0 = ret.Get(0).(postgres.Users)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, slackUserID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockbootstrapDAO_GetUserBySlackUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserBySlackUserID'
type MockbootstrapDAO_GetUserBySlackUserID_Call struct {
	*mock.Call
}

// GetUserBySlackUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - slackUserID string
func (_e *MockbootstrapDAO_Expecter) GetUserBySlackUserID(ctx interface{}, slackUserID interface{}) *MockbootstrapDAO_GetUserBySlackUserID_Call {
	return &MockbootstrapDAO_GetUserBySlackUserID_Call{Call: _e.mock.On("GetUserBySlackUserID", ctx, slackUserID)}
}

func (_c *MockbootstrapDAO_GetUserBySlackUserID_Call) Run(run func(ctx context.Context, slackUserID string)) *MockbootstrapDAO_GetUserBySlackUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockbootstrapDAO_GetUserBySlackUserID_Call) Return(users postgres.Users, err error) *MockbootstrapDAO_GetUserBySlackUserID_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockbootstrapDAO_GetUserBySlackUserID_Call) RunAndReturn(run func(ctx context.Context, slackUserID string) (postgres.Users, error)) *MockbootstrapDAO_GetUserBySlackUserID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCredentials provides a mock function for the type MockbootstrapDAO
func (_mock *MockbootstrapDAO) UpdateCredentials(ctx context.Context, id string, c postgres.Credentials) (postgres.Credentials, error) {
	ret := _mock.Called(ctx, id, c)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCredentials")
	}

	var r0 postgres.Credentials
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, postgres.Credentials) (postgres.Credentials, error)); ok {
		return returnFunc(ctx, id, c)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, postgres.Credentials) postgres.Credentials); ok {
		r0 = returnFunc(ctx, id, c)
	} else {
		r0 = ret.Get(0).(postgres.Credentials)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, postgres.Credentials) error); ok {
		r1 = returnFunc(ctx, id, c)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockbootstrapDAO_UpdateCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCredentials'
type MockbootstrapDAO_UpdateCredentials_Call struct {
	*mock.Call
}

// UpdateCredentials is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - c postgres.Credentials
func (_e *MockbootstrapDAO_Expecter) UpdateCredentials(ctx interface{}, id interface{}, c interface{}) *MockbootstrapDAO_UpdateCredentials_Call {
	return &MockbootstrapDAO_UpdateCredentials_Call{Call: _e.mock.On("UpdateCredentials", ctx, id, c)}
}

func (_c *MockbootstrapDAO_UpdateCredentials_Call) Run(run func(ctx context.Context, id string, c postgres.Credentials)) *MockbootstrapDAO_UpdateCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 postgres.Credentials
		if args[2] != nil {
			arg2 = args[2].(postgres.Credentials)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockbootstrapDAO_UpdateCredentials_Call) Return(credentials postgres.Credentials, err error) *MockbootstrapDAO_UpdateCredentials_Call {
	_c.Call.Return(credentials, err)
	return _c
}

func (_c *MockbootstrapDAO_UpdateCredentials_Call) RunAndReturn(run func(ctx context.Context, id string, c postgres.Credentials) (postgres.Credentials, error)) *MockbootstrapDAO_UpdateCredentials_Call {
	_c.Call.Return(run)
	return _c
}
