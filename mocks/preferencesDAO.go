// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/pbdeuchler/assistant-server/dao/postgres"
	mock "github.com/stretchr/testify/mock"
)

// NewMockpreferencesDAO creates a new instance of MockpreferencesDAO. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockpreferencesDAO(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockpreferencesDAO {
	mock := &MockpreferencesDAO{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockpreferencesDAO is an autogenerated mock type for the preferencesDAO type
type MockpreferencesDAO struct {
	mock.Mock
}

type MockpreferencesDAO_Expecter struct {
	mock *mock.Mock
}

func (_m *MockpreferencesDAO) EXPECT() *MockpreferencesDAO_Expecter {
	return &MockpreferencesDAO_Expecter{mock: &_m.Mock}
}

// CreatePreferences provides a mock function for the type MockpreferencesDAO
func (_mock *MockpreferencesDAO) CreatePreferences(ctx context.Context, p postgres.Preferences) (postgres.Preferences, error) {
	ret := _mock.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for CreatePreferences")
	}

	var r0 postgres.Preferences
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, postgres.Preferences) (postgres.Preferences, error)); ok {
		return returnFunc(ctx, p)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, postgres.Preferences) postgres.Preferences); ok {
		r0 = returnFunc(ctx, p)
	} else {
		r0 = ret.Get(0).(postgres.Preferences)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, postgres.Preferences) error); ok {
		r1 = returnFunc(ctx, p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockpreferencesDAO_CreatePreferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePreferences'
type MockpreferencesDAO_CreatePreferences_Call struct {
	*mock.Call
}

// CreatePreferences is a helper method to define mock.On call
//   - ctx context.Context
//   - p postgres.Preferences
func (_e *MockpreferencesDAO_Expecter) CreatePreferences(ctx interface{}, p interface{}) *MockpreferencesDAO_CreatePreferences_Call {
	return &MockpreferencesDAO_CreatePreferences_Call{Call: _e.mock.On("CreatePreferences", ctx, p)}
}

func (_c *MockpreferencesDAO_CreatePreferences_Call) Run(run func(ctx context.Context, p postgres.Preferences)) *MockpreferencesDAO_CreatePreferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 postgres.Preferences
		if args[1] != nil {
			arg1 = args[1].(postgres.Preferences)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockpreferencesDAO_CreatePreferences_Call) Return(preferences postgres.Preferences, err error) *MockpreferencesDAO_CreatePreferences_Call {
	_c.Call.Return(preferences, err)
	return _c
}

func (_c *MockpreferencesDAO_CreatePreferences_Call) RunAndReturn(run func(ctx context.Context, p postgres.Preferences) (postgres.Preferences, error)) *MockpreferencesDAO_CreatePreferences_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePreferences provides a mock function for the type MockpreferencesDAO
func (_mock *MockpreferencesDAO) DeletePreferences(ctx context.Context, key string, specifier string) error {
	ret := _mock.Called(ctx, key, specifier)

	if len(ret) == 0 {
		panic("no return value specified for DeletePreferences")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, key, specifier)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockpreferencesDAO_DeletePreferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePreferences'
type MockpreferencesDAO_DeletePreferences_Call struct {
	*mock.Call
}

// DeletePreferences is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - specifier string
func (_e *MockpreferencesDAO_Expecter) DeletePreferences(ctx interface{}, key interface{}, specifier interface{}) *MockpreferencesDAO_DeletePreferences_Call {
	return &MockpreferencesDAO_DeletePreferences_Call{Call: _e.mock.On("DeletePreferences", ctx, key, specifier)}
}

func (_c *MockpreferencesDAO_DeletePreferences_Call) Run(run func(ctx context.Context, key string, specifier string)) *MockpreferencesDAO_DeletePreferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockpreferencesDAO_DeletePreferences_Call) Return(err error) *MockpreferencesDAO_DeletePreferences_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockpreferencesDAO_DeletePreferences_Call) RunAndReturn(run func(ctx context.Context, key string, specifier string) error) *MockpreferencesDAO_DeletePreferences_Call {
	_c.Call.Return(run)
	return _c
}

// GetPreferences provides a mock function for the type MockpreferencesDAO
func (_mock *MockpreferencesDAO) GetPreferences(ctx context.Context, key string, specifier string) (postgres.Preferences, error) {
	ret := _mock.Called(ctx, key, specifier)

	if len(ret) == 0 {
		panic("no return value specified for GetPreferences")
	}

	var r0 postgres.Preferences
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (postgres.Preferences, error)); ok {
		return returnFunc(ctx, key, specifier)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) postgres.Preferences); ok {
		r0 = returnFunc(ctx, key, specifier)
	} else {
		r0 = ret.Get(0).(postgres.Preferences)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, key, specifier)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockpreferencesDAO_GetPreferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPreferences'
type MockpreferencesDAO_GetPreferences_Call struct {
	*mock.Call
}

// GetPreferences is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - specifier string
func (_e *MockpreferencesDAO_Expecter) GetPreferences(ctx interface{}, key interface{}, specifier interface{}) *MockpreferencesDAO_GetPreferences_Call {
	return &MockpreferencesDAO_GetPreferences_Call{Call: _e.mock.On("GetPreferences", ctx, key, specifier)}
}

func (_c *MockpreferencesDAO_GetPreferences_Call) Run(run func(ctx context.Context, key string, specifier string)) *MockpreferencesDAO_GetPreferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockpreferencesDAO_GetPreferences_Call) Return(preferences postgres.Preferences, err error) *MockpreferencesDAO_GetPreferences_Call {
	_c.Call.Return(preferences, err)
	return _c
}

func (_c *MockpreferencesDAO_GetPreferences_Call) RunAndReturn(run func(ctx context.Context, key string, specifier string) (postgres.Preferences, error)) *MockpreferencesDAO_GetPreferences_Call {
	_c.Call.Return(run)
	return _c
}

// ListPreferences provides a mock function for the type MockpreferencesDAO
func (_mock *MockpreferencesDAO) ListPreferences(ctx context.Context, options postgres.ListOptions) ([]postgres.Preferences, error) {
	ret := _mock.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for ListPreferences")
	}

	var r0 []postgres.Preferences
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, postgres.ListOptions) ([]postgres.Preferences, error)); ok {
		return returnFunc(ctx, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, postgres.ListOptions) []postgres.Preferences); ok {
		r0 = returnFunc(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postgres.Preferences)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, postgres.ListOptions) error); ok {
		r1 = returnFunc(ctx, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockpreferencesDAO_ListPreferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPreferences'
type MockpreferencesDAO_ListPreferences_Call struct {
	*mock.Call
}

// ListPreferences is a helper method to define mock.On call
//   - ctx context.Context
//   - options postgres.ListOptions
func (_e *MockpreferencesDAO_Expecter) ListPreferences(ctx interface{}, options interface{}) *MockpreferencesDAO_ListPreferences_Call {
	return &MockpreferencesDAO_ListPreferences_Call{Call: _e.mock.On("ListPreferences", ctx, options)}
}

func (_c *MockpreferencesDAO_ListPreferences_Call) Run(run func(ctx context.Context, options postgres.ListOptions)) *MockpreferencesDAO_ListPreferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 postgres.ListOptions
		if args[1] != nil {
			arg1 = args[1].(postgres.ListOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockpreferencesDAO_ListPreferences_Call) Return(preferencess []postgres.Preferences, err error) *MockpreferencesDAO_ListPreferences_Call {
	_c.Call.Return(preferencess, err)
	return _c
}

func (_c *MockpreferencesDAO_ListPreferences_Call) RunAndReturn(run func(ctx context.Context, options postgres.ListOptions) ([]postgres.Preferences, error)) *MockpreferencesDAO_ListPreferences_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePreferences provides a mock function for the type MockpreferencesDAO
func (_mock *MockpreferencesDAO) UpdatePreferences(ctx context.Context, key string, specifier string, p postgres.Preferences) (postgres.Preferences, error) {
	ret := _mock.Called(ctx, key, specifier, p)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePreferences")
	}

	var r0 postgres.Preferences
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, postgres.Preferences) (postgres.Preferences, error)); ok {
		return returnFunc(ctx, key, specifier, p)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, postgres.Preferences) postgres.Preferences); ok {
		r0 = returnFunc(ctx, key, specifier, p)
	} else {
		r0 = ret.Get(0).(postgres.Preferences)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, postgres.Preferences) error); ok {
		r1 = returnFunc(ctx, key, specifier, p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockpreferencesDAO_UpdatePreferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePreferences'
type MockpreferencesDAO_UpdatePreferences_Call struct {
	*mock.Call
}

// UpdatePreferences is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - specifier string
//   - p postgres.Preferences
func (_e *MockpreferencesDAO_Expecter) UpdatePreferences(ctx interface{}, key interface{}, specifier interface{}, p interface{}) *MockpreferencesDAO_UpdatePreferences_Call {
	return &MockpreferencesDAO_UpdatePreferences_Call{Call: _e.mock.On("UpdatePreferences", ctx, key, specifier, p)}
}

func (_c *MockpreferencesDAO_UpdatePreferences_Call) Run(run func(ctx context.Context, key string, specifier string, p postgres.Preferences)) *MockpreferencesDAO_UpdatePreferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 postgres.Preferences
		if args[3] != nil {
			arg3 = args[3].(postgres.Preferences)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockpreferencesDAO_UpdatePreferences_Call) Return(preferences postgres.Preferences, err error) *MockpreferencesDAO_UpdatePreferences_Call {
	_c.Call.Return(preferences, err)
	return _c
}

func (_c *MockpreferencesDAO_UpdatePreferences_Call) RunAndReturn(run func(ctx context.Context, key string, specifier string, p postgres.Preferences) (postgres.Preferences, error)) *MockpreferencesDAO_UpdatePreferences_Call {
	_c.Call.Return(run)
	return _c
}
