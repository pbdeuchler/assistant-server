// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/pbdeuchler/assistant-server/dao/postgres"
	mock "github.com/stretchr/testify/mock"
)

// NewMocktodoDAO creates a new instance of MocktodoDAO. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocktodoDAO(t interface {
	mock.TestingT
	Cleanup(func())
}) *MocktodoDAO {
	mock := &MocktodoDAO{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MocktodoDAO is an autogenerated mock type for the todoDAO type
type MocktodoDAO struct {
	mock.Mock
}

type MocktodoDAO_Expecter struct {
	mock *mock.Mock
}

func (_m *MocktodoDAO) EXPECT() *MocktodoDAO_Expecter {
	return &MocktodoDAO_Expecter{mock: &_m.Mock}
}

// CreateTodo provides a mock function for the type MocktodoDAO
func (_mock *MocktodoDAO) CreateTodo(ctx context.Context, t postgres.Todo) (postgres.Todo, error) {
	ret := _mock.Called(ctx, t)

	if len(ret) == 0 {
		panic("no return value specified for CreateTodo")
	}

	var r0 postgres.Todo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, postgres.Todo) (postgres.Todo, error)); ok {
		return returnFunc(ctx, t)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, postgres.Todo) postgres.Todo); ok {
		r0 = returnFunc(ctx, t)
	} else {
		r0 = ret.Get(0).(postgres.Todo)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, postgres.Todo) error); ok {
		r1 = returnFunc(ctx, t)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MocktodoDAO_CreateTodo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTodo'
type MocktodoDAO_CreateTodo_Call struct {
	*mock.Call
}

// CreateTodo is a helper method to define mock.On call
//   - ctx context.Context
//   - t postgres.Todo
func (_e *MocktodoDAO_Expecter) CreateTodo(ctx interface{}, t interface{}) *MocktodoDAO_CreateTodo_Call {
	return &MocktodoDAO_CreateTodo_Call{Call: _e.mock.On("CreateTodo", ctx, t)}
}

func (_c *MocktodoDAO_CreateTodo_Call) Run(run func(ctx context.Context, t postgres.Todo)) *MocktodoDAO_CreateTodo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 postgres.Todo
		if args[1] != nil {
			arg1 = args[1].(postgres.Todo)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MocktodoDAO_CreateTodo_Call) Return(todo postgres.Todo, err error) *MocktodoDAO_CreateTodo_Call {
	_c.Call.Return(todo, err)
	return _c
}

func (_c *MocktodoDAO_CreateTodo_Call) RunAndReturn(run func(ctx context.Context, t postgres.Todo) (postgres.Todo, error)) *MocktodoDAO_CreateTodo_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTodo provides a mock function for the type MocktodoDAO
func (_mock *MocktodoDAO) DeleteTodo(ctx context.Context, uid string) error {
	ret := _mock.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTodo")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, uid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MocktodoDAO_DeleteTodo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTodo'
type MocktodoDAO_DeleteTodo_Call struct {
	*mock.Call
}

// DeleteTodo is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
func (_e *MocktodoDAO_Expecter) DeleteTodo(ctx interface{}, uid interface{}) *MocktodoDAO_DeleteTodo_Call {
	return &MocktodoDAO_DeleteTodo_Call{Call: _e.mock.On("DeleteTodo", ctx, uid)}
}

func (_c *MocktodoDAO_DeleteTodo_Call) Run(run func(ctx context.Context, uid string)) *MocktodoDAO_DeleteTodo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MocktodoDAO_DeleteTodo_Call) Return(err error) *MocktodoDAO_DeleteTodo_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MocktodoDAO_DeleteTodo_Call) RunAndReturn(run func(ctx context.Context, uid string) error) *MocktodoDAO_DeleteTodo_Call {
	_c.Call.Return(run)
	return _c
}

// GetTodo provides a mock function for the type MocktodoDAO
func (_mock *MocktodoDAO) GetTodo(ctx context.Context, uid string) (postgres.Todo, error) {
	ret := _mock.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetTodo")
	}

	var r0 postgres.Todo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (postgres.Todo, error)); ok {
		return returnFunc(ctx, uid)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) postgres.Todo); ok {
		r0 = returnFunc(ctx, uid)
	} else {
		r0 = ret.Get(0).(postgres.Todo)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MocktodoDAO_GetTodo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTodo'
type MocktodoDAO_GetTodo_Call struct {
	*mock.Call
}

// GetTodo is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
func (_e *MocktodoDAO_Expecter) GetTodo(ctx interface{}, uid interface{}) *MocktodoDAO_GetTodo_Call {
	return &MocktodoDAO_GetTodo_Call{Call: _e.mock.On("GetTodo", ctx, uid)}
}

func (_c *MocktodoDAO_GetTodo_Call) Run(run func(ctx context.Context, uid string)) *MocktodoDAO_GetTodo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MocktodoDAO_GetTodo_Call) Return(todo postgres.Todo, err error) *MocktodoDAO_GetTodo_Call {
	_c.Call.Return(todo, err)
	return _c
}

func (_c *MocktodoDAO_GetTodo_Call) RunAndReturn(run func(ctx context.Context, uid string) (postgres.Todo, error)) *MocktodoDAO_GetTodo_Call {
	_c.Call.Return(run)
	return _c
}

// ListTodos provides a mock function for the type MocktodoDAO
func (_mock *MocktodoDAO) ListTodos(ctx context.Context, options postgres.ListOptions) ([]postgres.Todo, error) {
	ret := _mock.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for ListTodos")
	}

	var r0 []postgres.Todo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, postgres.ListOptions) ([]postgres.Todo, error)); ok {
		return returnFunc(ctx, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, postgres.ListOptions) []postgres.Todo); ok {
		r0 = returnFunc(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postgres.Todo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, postgres.ListOptions) error); ok {
		r1 = returnFunc(ctx, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MocktodoDAO_ListTodos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTodos'
type MocktodoDAO_ListTodos_Call struct {
	*mock.Call
}

// ListTodos is a helper method to define mock.On call
//   - ctx context.Context
//   - options postgres.ListOptions
func (_e *MocktodoDAO_Expecter) ListTodos(ctx interface{}, options interface{}) *MocktodoDAO_ListTodos_Call {
	return &MocktodoDAO_ListTodos_Call{Call: _e.mock.On("ListTodos", ctx, options)}
}

func (_c *MocktodoDAO_ListTodos_Call) Run(run func(ctx context.Context, options postgres.ListOptions)) *MocktodoDAO_ListTodos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 postgres.ListOptions
		if args[1] != nil {
			arg1 = args[1].(postgres.ListOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MocktodoDAO_ListTodos_Call) Return(todos []postgres.Todo, err error) *MocktodoDAO_ListTodos_Call {
	_c.Call.Return(todos, err)
	return _c
}

func (_c *MocktodoDAO_ListTodos_Call) RunAndReturn(run func(ctx context.Context, options postgres.ListOptions) ([]postgres.Todo, error)) *MocktodoDAO_ListTodos_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTodo provides a mock function for the type MocktodoDAO
func (_mock *MocktodoDAO) UpdateTodo(ctx context.Context, uid string, t postgres.UpdateTodo) (postgres.Todo, error) {
	ret := _mock.Called(ctx, uid, t)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTodo")
	}

	var r0 postgres.Todo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, postgres.UpdateTodo) (postgres.Todo, error)); ok {
		return returnFunc(ctx, uid, t)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, postgres.UpdateTodo) postgres.Todo); ok {
		r0 = returnFunc(ctx, uid, t)
	} else {
		r0 = ret.Get(0).(postgres.Todo)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, postgres.UpdateTodo) error); ok {
		r1 = returnFunc(ctx, uid, t)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MocktodoDAO_UpdateTodo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTodo'
type MocktodoDAO_UpdateTodo_Call struct {
	*mock.Call
}

// UpdateTodo is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - t postgres.UpdateTodo
func (_e *MocktodoDAO_Expecter) UpdateTodo(ctx interface{}, uid interface{}, t interface{}) *MocktodoDAO_UpdateTodo_Call {
	return &MocktodoDAO_UpdateTodo_Call{Call: _e.mock.On("UpdateTodo", ctx, uid, t)}
}

func (_c *MocktodoDAO_UpdateTodo_Call) Run(run func(ctx context.Context, uid string, t postgres.UpdateTodo)) *MocktodoDAO_UpdateTodo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 postgres.UpdateTodo
		if args[2] != nil {
			arg2 = args[2].(postgres.UpdateTodo)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MocktodoDAO_UpdateTodo_Call) Return(todo postgres.Todo, err error) *MocktodoDAO_UpdateTodo_Call {
	_c.Call.Return(todo, err)
	return _c
}

func (_c *MocktodoDAO_UpdateTodo_Call) RunAndReturn(run func(ctx context.Context, uid string, t postgres.UpdateTodo) (postgres.Todo, error)) *MocktodoDAO_UpdateTodo_Call {
	_c.Call.Return(run)
	return _c
}
