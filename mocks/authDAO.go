// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/pbdeuchler/assistant-server/dao/postgres"
	mock "github.com/stretchr/testify/mock"
)

// NewMockauthDAO creates a new instance of MockauthDAO. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockauthDAO(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockauthDAO {
	mock := &MockauthDAO{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockauthDAO is an autogenerated mock type for the authDAO type
type MockauthDAO struct {
	mock.Mock
}

type MockauthDAO_Expecter struct {
	mock *mock.Mock
}

func (_m *MockauthDAO) EXPECT() *MockauthDAO_Expecter {
	return &MockauthDAO_Expecter{mock: &_m.Mock}
}

// CreateCredentials provides a mock function for the type MockauthDAO
func (_mock *MockauthDAO) CreateCredentials(ctx context.Context, c postgres.Credentials) (postgres.Credentials, error) {
	ret := _mock.Called(ctx, c)

	if len(ret) == 0 {
		panic("no return value specified for CreateCredentials")
	}

	var r0 postgres.Credentials
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, postgres.Credentials) (postgres.Credentials, error)); ok {
		return returnFunc(ctx, c)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, postgres.Credentials) postgres.Credentials); ok {
		r0 = returnFunc(ctx, c)
	} else {
		r0 = ret.Get(0).(postgres.Credentials)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, postgres.Credentials) error); ok {
		r1 = returnFunc(ctx, c)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockauthDAO_CreateCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCredentials'
type MockauthDAO_CreateCredentials_Call struct {
	*mock.Call
}

// CreateCredentials is a helper method to define mock.On call
//   - ctx context.Context
//   - c postgres.Credentials
func (_e *MockauthDAO_Expecter) CreateCredentials(ctx interface{}, c interface{}) *MockauthDAO_CreateCredentials_Call {
	return &MockauthDAO_CreateCredentials_Call{Call: _e.mock.On("CreateCredentials", ctx, c)}
}

func (_c *MockauthDAO_CreateCredentials_Call) Run(run func(ctx context.Context, c postgres.Credentials)) *MockauthDAO_CreateCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 postgres.Credentials
		if args[1] != nil {
			arg1 = args[1].(postgres.Credentials)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockauthDAO_CreateCredentials_Call) Return(credentials postgres.Credentials, err error) *MockauthDAO_CreateCredentials_Call {
	_c.Call.Return(credentials, err)
	return _c
}

func (_c *MockauthDAO_CreateCredentials_Call) RunAndReturn(run func(ctx context.Context, c postgres.Credentials) (postgres.Credentials, error)) *MockauthDAO_CreateCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// GetCredentialsByUserAndType provides a mock function for the type MockauthDAO
func (_mock *MockauthDAO) GetCredentialsByUserAndType(ctx context.Context, userID string, credentialType string) (postgres.Credentials, error) {
	ret := _mock.Called(ctx, userID, credentialType)

	if len(ret) == 0 {
		panic("no return value specified for GetCredentialsByUserAndType")
	}

	var r0 postgres.Credentials
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (postgres.Credentials, error)); ok {
		return returnFunc(ctx, userID, credentialType)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) postgres.Credentials); ok {
		r0 = returnFunc(ctx, userID, credentialType)
	} else {
		r0 = ret.Get(0).(postgres.Credentials)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, userID, credentialType)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockauthDAO_GetCredentialsByUserAndType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCredentialsByUserAndType'
type MockauthDAO_GetCredentialsByUserAndType_Call struct {
	*mock.Call
}

// GetCredentialsByUserAndType is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - credentialType string
func (_e *MockauthDAO_Expecter) GetCredentialsByUserAndType(ctx interface{}, userID interface{}, credentialType interface{}) *MockauthDAO_GetCredentialsByUserAndType_Call {
	return &MockauthDAO_GetCredentialsByUserAndType_Call{Call: _e.mock.On("GetCredentialsByUserAndType", ctx, userID, credentialType)}
}

func (_c *MockauthDAO_GetCredentialsByUserAndType_Call) Run(run func(ctx context.Context, userID string, credentialType string)) *MockauthDAO_GetCredentialsByUserAndType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockauthDAO_GetCredentialsByUserAndType_Call) Return(credentials postgres.Credentials, err error) *MockauthDAO_GetCredentialsByUserAndType_Call {
	_c.Call.Return(credentials, err)
	return _c
}

func (_c *MockauthDAO_GetCredentialsByUserAndType_Call) RunAndReturn(run func(ctx context.Context, userID string, credentialType string) (postgres.Credentials, error)) *MockauthDAO_GetCredentialsByUserAndType_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCredentials provides a mock function for the type MockauthDAO
func (_mock *MockauthDAO) UpdateCredentials(ctx context.Context, id string, c postgres.Credentials) (postgres.Credentials, error) {
	ret := _mock.Called(ctx, id, c)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCredentials")
	}

	var r0 postgres.Credentials
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, postgres.Credentials) (postgres.Credentials, error)); ok {
		return returnFunc(ctx, id, c)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, postgres.Credentials) postgres.Credentials); ok {
		r0 = returnFunc(ctx, id, c)
	} else {
		r0 = ret.Get(0).(postgres.Credentials)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, postgres.Credentials) error); ok {
		r1 = returnFunc(ctx, id, c)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockauthDAO_UpdateCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCredentials'
type MockauthDAO_UpdateCredentials_Call struct {
	*mock.Call
}

// UpdateCredentials is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - c postgres.Credentials
func (_e *MockauthDAO_Expecter) UpdateCredentials(ctx interface{}, id interface{}, c interface{}) *MockauthDAO_UpdateCredentials_Call {
	return &MockauthDAO_UpdateCredentials_Call{Call: _e.mock.On("UpdateCredentials", ctx, id, c)}
}

func (_c *MockauthDAO_UpdateCredentials_Call) Run(run func(ctx context.Context, id string, c postgres.Credentials)) *MockauthDAO_UpdateCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 postgres.Credentials
		if args[2] != nil {
			arg2 = args[2].(postgres.Credentials)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockauthDAO_UpdateCredentials_Call) Return(credentials postgres.Credentials, err error) *MockauthDAO_UpdateCredentials_Call {
	_c.Call.Return(credentials, err)
	return _c
}

func (_c *MockauthDAO_UpdateCredentials_Call) RunAndReturn(run func(ctx context.Context, id string, c postgres.Credentials) (postgres.Credentials, error)) *MockauthDAO_UpdateCredentials_Call {
	_c.Call.Return(run)
	return _c
}
